script(type="text/javascript").
  var route = !{JSON.stringify(route)}
  var service = !{JSON.stringify(service)}
  // 1. 파싱 보여주는 함수
  async function parsing_ajax(flag) {
    // 입력한 텍스트
    sessionTime_temp = sessionTime
    let text = $("#chat_data").text()
    console.log("parsing_ajax 입력한 텍스트", text)

    // 숫자로 API 처리
    if (await isDigit(text)) {
      if ($(`#API_${text}`).text()) {
        $("#chat_data").text($(`#API_${text}`).text())
        return await parsing_ajax("PARSE")
      }
    }

    // 만약 FLAG가 PARSE이면 클라이언트 메시지 처리 및 로그
    if (flag == "PARSE") {
      await client_message()
    }

    // AJAX 처리
    let xhr = new XMLHttpRequest()
    xhr.open('POST', `/parsing`, true)
    xhr.setRequestHeader("Content-Type", "application/json")
    xhr.send(JSON.stringify({
      route,
      service,
      flag,
      text
    }))

    xhr.addEventListener("load", async function() {
      // 받은 메시지로 다음 함수 진행
      let responseText = JSON.parse(xhr.responseText)
      return await server_message_function(responseText)
    })
  }

  // 2. ajax server_message 함수
  async function server_message_function(object) {
    let flag = object.flag
    let information = object.information
    let api_information = object.api_information
    let message = object.message
    let str = ""
    // 정보보기 함수 처리
    await information_function(object)
    // API 완료
    await server_message(message)

    if (flag == "END") // 만약 API 통신이 끝났다면 3단계로
      return await rest_api_ajax(information, api_information)
  }

  // 3. rest api 통신 함수
  async function rest_api_ajax(information, api_information) {
    var url = `/chat/response`
    var xhr = new XMLHttpRequest()
    xhr.open('POST', url, true)
    xhr.setRequestHeader('Content-Type', 'application/json')
    xhr.send(JSON.stringify({
      route,
      service,
      information,
      api_information
    }))
    xhr.addEventListener('load', async function(evt) {
      let res = JSON.parse(evt.currentTarget.response)
      await server_message(res)
      return await parsing_ajax("HOME")
    })
  }

  // 클라이언트 메시지 보여주는 함수
  async function client_message() {
    let text = $("#chat_data").text()
    let name = $("#userId").text()
    let msg = ""
    $("#chat_data").text("")
    msg = "<div class='msg'>"
    msg += "<div class='user' style='text-align:right;'>" + name + "</div>"
    msg += "<div class='content' style='justify-content:flex-end;'>"
    msg += "<div class='time'>" + await getTime() + "</div>"
    msg += "<div class='data me'>" + text + "</div>"
    msg += "</div>"
    msg += "</div>"
    $("#chat_content").append(msg)

    str = "<img src='/img/loading.png' width='30' class='loading'>"

    msg = "<div class='msg load'>"
    msg += "<div class='user'>System</div>"
    msg += "<div class='content'>"
    msg += "<div class='data notme'>" + str + "</div>"
    msg += "<div class='time'>" + await getTime() + "</div>"
    msg += "</div>"
    msg += "</div>"
    $("#chat_content").append(msg)

    await scroll_bottom()
  }

  // 서버 메시지 보여주는 함수
  async function server_message(msg) {
    $(".load").remove()
    $("#chat_content").append(msg)
    await scroll_bottom()
  }

  // 정보보기 담당 함수
  async function information_function(object) {
    console.log(object)
    let flag = object.flag
    let recommend = object.recommend
    let information = object.information
    let str = ""
    if (flag == "LOGIN" || flag == 'ESC' || flag == 'CANCEL') {
      str += `<table id='infomation_table'>`
      str += `<tr>`
      str += `<td>정보없음`
      str += `</td>`
      str += `</tr>`
      str += "</table>"
      $("#inforamtion_body").html(str)
      return
    }
    if (flag == 'HOME' || flag == 'UNKNOWN')
      return
        
    //- if (information) str += `<div id='information_message'>${information.API_information.display_name}</div>`
    str += `<table id='infomation_table'>`
    for (let item in information) {
      let record = information[item]
      if (typeof record === 'object') {
        if (record.necessary) {
          str += `<tr>`
          if (record.result) {
            str += `<td class='necessary'>${record.display_name}`
            str += `<td class='necessary'>`
            if (await Array.isArray(record.result)) {
              for (let i in record.result)
                str += record.result[i].parsing_value + " "
            } else {
              str += record.result + " "
            }
            str += `</td>`
          } else {
            str += `<td class='not_necessary'>${record.display_name}</td>`
            str += `<td class='not_necessary'></td>`
          }
          str += `</tr>`
        }
      }
    }
    str += "</table>"
    $("#inforamtion_body").html(str)
  }

  // 시간 받아오기 함수
  async function getTime() {
    var currentTime = new Date()
    return (await currentTime.getHours() < 10 ? '0' + await currentTime.getHours() : currentTime.getHours()) + ":" +
      (await currentTime.getMinutes() < 10 ? '0' + await currentTime.getMinutes() : currentTime.getMinutes()) + ":" +
      (await currentTime.getSeconds() < 10 ? '0' + await currentTime.getSeconds() : currentTime.getSeconds())
  }

  // 문자열이 정수로만 이루어 져있는가?
  async function isDigit(query) {
    if (query == null || query == "") return false
    for (let i in query) {
      if (query[i] == " ") return false
      if (0 <= Number(query[i]) && Number(query[i]) <= 9) continue
      else return false
    }
    return true
  }

  // 스크롤 내리기
  async function scroll_bottom() {
    var offset = $("#chat_content .msg").last().offset()
    $("#chat_content").scrollTop(offset.top * 10000)
  }
  
  // 로그아웃 함수
  async function logout_function() {
      let xhr = new XMLHttpRequest()
      xhr.open('POST', '/logout/session', true)
      xhr.setRequestHeader('Content-Type', 'application/json')
      xhr.send(JSON.stringify({
        route, 
        service
      }))
      xhr.addEventListener('load', async function(e) {
        let res = JSON.parse(xhr.responseText)
        alert(res.responseText)
        if (route == 'icon') {
          location.href = '/'
        }
        else if (route == 'homepage') {
          $("#chat_content").append("<div class='msg' style='padding:5px 0;'><div class='breakLine'></div></div>")
          $("#chat_content").append(`
            <div class='msg' style='padding:5px 0; text-align:center;'>
              로그아웃되었습니다. 재접속하세요.
            </div></div>`)
          $("#chat_content").append("<div class='msg' style='padding:5px 0;'><div class='breakLine'></div></div>")
          await scroll_bottom()
        }
      })
  }
  
  // 단지코드 변경 시 브레이크 라인
  async function make_breakLine(from, to) {
    sessionTime_temp = sessionTime
    $("#chat_content").append("<div class='msg' style='padding:5px 0;'><div class='breakLine'></div></div>")
    $("#chat_content").append(`
      <div class='msg' style='padding:5px 0; text-align:center;'>
        단지코드가 ${from}에서 ${to}로 변경되었습니다
      </div></div>`)
    $("#chat_content").append("<div class='msg' style='padding:5px 0;'><div class='breakLine'></div></div>")
    await scroll_bottom()
  }
  
  // ??
  async function extractDomain(url) {
    var domain;
    //find & remove protocol (http, ftp, etc.) and get domain
    if (url.indexOf("://") > -1) {
      domain = url.split('/')[2];
    } else {
      domain = url.split('/')[0];
    }
    //find & remove port number
    domain = domain.split(':')[0];
    return domain;
  }
